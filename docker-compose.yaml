# docker-compose.yaml
version: "3.8"

services:
  # Development container for GitHub Codespaces
  app:
    build:
      context: .
      dockerfile: .devcontainer/Dockerfile
    volumes:
      - ..:/workspace:cached
    command: sleep infinity
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/magic_server_db
      - OTLP_ENDPOINT=http://otel-collector:4317
    networks:
      - otel-network
    depends_on:
      - postgres
    
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: magic_server_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - otel-network

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    ports:
      - "16686:16686" # Jaeger UI
      - "4319:4317" # OTLP gRPC (collector → jaeger)
      - "9411:9411" # Zipkin HTTP (collector → jaeger, optional)
      - "6831:6831/udp" # Jaeger thrift compact (UDP)
      - "6832:6832/udp" # Jaeger thrift binary (UDP)
      - "14268:14268" # Jaeger thrift HTTP (collector direct)
      - "14250:14250" # Jaeger model (gRPC, collector direct)
    environment:
      COLLECTOR_ZIPKIN_HOST_PORT: ":9411"
      COLLECTOR_OTLP_ENABLED: "true"
      SPAN_STORAGE_TYPE: "memory" # can be "elasticsearch", "cassandra", or "badger" for production
      METRICS_STORAGE_TYPE: "prometheus"
      PROMETHEUS_SERVER_URL: "http://prometheus:9090"
      QUERY_BASE_PATH: "/jaeger"
      SAMPLING_STRATEGIES_FILE: "/etc/jaeger/sampling_strategies.json"
      PROCESSOR_JAEGER_BINARY_WORKERS: "2"
      PROCESSOR_JAEGER_COMPACT_WORKERS: "2"
      PROCESSOR_ZIPKIN_HTTP_WORKERS: "2"
    volumes:
      - ./config/jaeger/sampling_strategies.json:/etc/jaeger/sampling_strategies.json:ro
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:16686"]
      interval: 1s
      timeout: 3s
      retries: 10
    restart: unless-stopped
    networks:
      - otel-network

  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: otel-collector
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./config/otel-collector-config.yaml:/etc/otel-collector-config.yaml:ro
    ports:
      - "4317:4317" # OTLP gRPC receiver (apps → collector)
      - "4318:4318" # OTLP HTTP receiver (apps → collector)
      - "8889:8889" # Prometheus metrics exporter
    depends_on:
      - jaeger
    restart: unless-stopped
    networks:
      - otel-network
    extra_hosts:
      - "host.docker.internal:host-gateway"

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yaml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    volumes:
      - ./config/prometheus.yaml:/etc/prometheus/prometheus.yaml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    depends_on:
      - otel-collector
    restart: unless-stopped
    networks:
      - otel-network
    extra_hosts:
      - "host.docker.internal:host-gateway"
      
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    ports:
      - "3210:3000"
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - otel-network

  zipkin:
    image: openzipkin/zipkin:latest
    container_name: zipkin
    ports:
      - "9412:9411" # Zipkin UI and API
    environment:
      - STORAGE_TYPE=mem
      - JAVA_OPTS=-Xms512m -Xmx512m -XX:+ExitOnOutOfMemoryError
    restart: unless-stopped
    networks:
      - otel-network
  
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    restart: unless-stopped
    networks:
      - otel-network

networks:
  otel-network:
    driver: bridge

volumes:
  postgres_data:
  pgadmin_data:
  prometheus_data:
  grafana_data: